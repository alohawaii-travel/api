generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USERS =====

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String?
  avatar   String?
  role     UserRole @default(CUSTOMER)
  isActive Boolean  @default(true)

  // Google OAuth fields
  googleId String? @unique
  domain   String? // For domain whitelisting

  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model WhitelistedDomain {
  id        String   @id @default(cuid())
  domain    String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whitelisted_domains")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===== ENUMS =====

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}
